#!/bin/sh

## explanations
#
# config: https://wiki.archlinux.org/index.php/Dotfiles#Tracking_dotfiles_directly_with_Git
#
# git=hub https://github.com/github/hub
#
# config='/usr/bin/hub --git-dir=$HOME/.dotfiles/ --work-tree=$HOME' \
#
# `cl` / `cliboard` => `npm i -g clipboard-cli`
#
# `sv` => `sudoedit` instead of `sudo nvim`:
# read https://wiki.archlinux.org/index.php/Security#Editing_files_using_sudo

# Use neovim for vim if present.
command -v nvim >/dev/null && alias vim="nvim" vimdiff="nvim -d"

alias ka="killall" \
	Q="cd / && $HOME/.local/bin/tools/ecryptfs-unmount && i3-msg exit" \
	calcurse="calcurse -D ~/.config/calcurse" \
	f="$FILE" \
	p="pacman" \
	sp="sudo pacman" \
	S="systemctl --user" \
	SS="sudo systemctl" \
	sd="shutdown" \
	sad="shutdown 0" \
	config="hub --git-dir=$HOME/.dotfiles/ --work-tree=$HOME" \
	co="config" \
	cs="clear && config add ~/.gitignore && config status" \
	cl="clipboard" \
	d="docker" \
	r="ranger" \
	k="kubectl" \
	m="minikube" \
	le="lerna" \
	compass="mongodb-compass" \
	h="grep -Hr" \
	trem="transmission-remote" \
	e="dolphin" \
	e.="dolphin ." \
	v="$EDITOR" \
	sv="sudoedit" \
	sdn="sudo shutdown -h now" \
	gua="git remote | xargs -L1 git push --all" \
	ls="LC_COLLATE=C ls -hN --color=auto --group-directories-first" \
	la="ls -lAFs" \
	ll="ls -l --all --size --group-directories-first --human-readable --classify --color=auto" \
	l="ll" \
	lc="ll -C" \
	lsd="lsd --group-dirs first --classify --icon-theme unicode" \
	lcd="lsd --icon-theme fancy" \
	lad="lsd -la --icon-theme fancy" \
	lld="lad" \
	l1d="lsd --classic --icon never -1" \
	quit="exit" \
	q="exit" \
	cls="clear" \
	c.="vscodium . && exit" \
	gpgkeys="gpg --list-secret-keys --keyid-format LONG" \
	gpgreload="gpg-connect-agent reloadagent /bye" \
	yv="yarn version" \
	ref="shortcuts >/dev/null; source ~/.config/shortcutrc" \
	upc="sudo pacman -Syu; pkill -RTMIN+8 i3blocks" \
	lsp="pacman -Qett --color=always | less" \
	ffmpeg="ffmpeg -hide_banner" \
	chrome="nohup google-chrome-stable & disown" \
	ce="chrome && exit 0" \
	queota="printf \"want some?\n\"" \
	scim="sc-im" \
	py="python" \
	acl="arduino-cli" \
	ac="arduino-cli" \
	esl="eslint --ext js,jsx,ts,tsx" \
	lol="sudo sh -c 'echo \"abi.vsyscall32 = 0\" >> /etc/sysctl.conf && sysctl -p;'"

# Verbosity and settings that you pretty much just always are going to want.
alias \
	bat="cat /sys/class/power_supply/BAT?/capacity" \
	cp="cp -v" \
	mv="mv -v" \
	rm="rm -v" \
	mkd="mkdir -pv" \
	yt="youtube-dl --add-metadata -i" \
	yta="yt -x -f bestaudio/best" \
	ffmpeg="ffmpeg -hide_banner"

# Colorize commands when possible.
alias \
	grep="grep --color=auto" \
	diff="diff --color=auto" \
	ccat="highlight --out-format=ansi"

# These common commands are just too long! Abbreviate them.
alias \
	ka="killall" \
	trem="transmission-remote" \
	YT="youtube-viewer" \
	sdn="sudo shutdown -h now" \
	f="$FILE" \
	v="$EDITOR" \
	p="sudo pacman" \
	xi="sudo xbps-install" \
	xr="sudo xbps-remove -R" \
	xq="xbps-query"

# Some other stuff
alias \
	magit="nvim -c MagitOnly" \
	ref="shortcuts >/dev/null; source ~/.config/shortcutrc" \
	weath="less -S ~/.local/share/weatherreport" \

# This alias is important. It enables the `pauseallmpv` command.
alias mpv="mpv --input-ipc-server=/tmp/mpvsoc$(date +%s)"

# Removed because of https://github.com/nvbn/thefuck/issues/1018
### https://github.com/nvbn/thefuck
### eval $(thefuck --alias)

# Functions & stuff

cr() { sudo vscodium --user-data-dir $HOME/.config/VSCodium/ --extensions-dir $HOME/.vscode-oss/extensions $* }

# function is better than an alias
# note - do NOT quote the '$*'!
# (allows better auto-completions & compatibility etc)
# see https://github.com/tj/git-extras/issues/797
git() {
	hub $*
}

# compdef is needed for auto-completions,
# since I'm using `git`, `hub` and `git-extras`
compdef git="hub"

g() {
	hub $*
}

compdef g="hub"

gnp() {
	hub --no-pager $*
}

compdef gr="hub"

# Fast clipboard copying
# -r removes the last newline! https://stackoverflow.com/a/43830018/9285308
clip() { xclip -r -selection c ;}      # pipe  into  me
copy() { xclip -r -selection c "$1" ;} # gimme the file

cg() {
	case "$OSTYPE" in
		darwin*) pbcopy < .git/COMMIT_EDITMSG ;;
			  *)   copy   .git/COMMIT_EDITMSG ;;
	esac
}

# calls aliases. See https://github.com/sarpik/voidrice/blob/master/.gitconfig
gs() { hub s $* }
gso() { hub so $* }
gd() { hub d $* }
gds() { hub ds $* }
gg() { hub s $* }
ggg() { hub s $* }
gggg() { hub s $* }
ggggg() { hub s $* }
s() { hub s $* }
gcl() { hub cl $* }
gp() { hub p $* }
gpp() { hub pp $* }
gpl() { hub pl $* }
gf() { hub f $* }
gfa() { hub fa $* }
gc() { hub c $* }
gca() { hub ca $* }
gcaw() { hub caw $* }
gcawpf() { hub cawpf $* }
gcawpfn() { hub cawpfn $* }
gco() {  hub co $* }
gcom() { hub co master $* }
gcob() { hub co -b $* }
gb() { hub b $* }
gbd() { hub bd $* }
gba() { hub ba $* }
gr() { hub r $* }
gri() { hub ri $* }
gra() { g ra $* }
grc() { g rc $* }
grom() { g rom $* }
griom() { hub riom $* }
grmbp() { hub rmbp $* }
gl() { hub l $* }
glg() { hub lg $* }
gls() { hub lgs $* }
glgs() { hub lgs $* }
ga() { hub a $* }
gad() { hub a . $* }
gadc() { hub adc $* }
gadca() { hub adca $* }
gadcaw() { hub adcaw $* }
gadcawpf() { hub adcawpf $* }
gadcawpfn() { hub adcawpfn $* }
gadct() { hub adct $* }
gbp() { hub bp $* }
gss() { hub ss $* }
gsh() { hub sh $* }
gct() { hub ct $* }
gt() { hub t $* }
gtt() { hub tt $* }
gtas() { hub tas $* }
gprmee() { g prmee $* }
gprmeed() { g prmeed $* }
gprmeew() { g prmeew $* }
gprmeedw() { g prmeedw $* }

# alias k="kubectl"
kg() { k get $* }
kga() { k get all $* }
kgp() { k get pods $* }
kgd() { k get deploy $* }
kgs() { k get service $* }
kd() { k delete $* }
kdp() { k delete pod $* }
kdd() { k delete deploy $* }
kl() { k logs $* } # (pod|deploy|...)_name
ke() { k exec $* } # -it pod_name bash
kaf() { k apply -f $* } # image_deployment.yaml
kd() { k describe $* }
kdp() { k describe pod $* }
kdd() { k describe deploy $* }

y() { yarn $* }
yd() { yarn dev $* || yarn develop $* }
yy() { yd $* }
yb() { y build $* }
yw() { y watch $* }
ya() { y add $* }
yr() { y rm $* }

yg() { y global $* }
yga() { y global add $* }

x() {
	cputils $*
}

# vscode
c() {
	vscodium $*
}

compdef c="code"

ci() {
	code-insiders $*
}

compdef ci="code"

drag() {
	dragon-drag-and-drop $*
}

fork() {
	nohup $* &
}

forkq() {
	nohup $* &
	exit
}

za() {
	fork zathura $*
}

# taken from the 'Exec' entry once a desktop shortcut is created
postwoman() {
	/opt/google/chrome/google-chrome --profile-directory=Default --app-id=ljencpkfbmahjfhepjlnokmmfipcbcld $*
}


command -v nvim >/dev/null && alias vim="nvim" vimdiff="nvim -d" # Use neovim for vim if present.

# https://github.com/nvbn/thefuck
# removed because of https://github.com/nvbn/thefuck/issues/1018
###eval $(thefuck --alias)

# --- #

# auto-completions

### NOTE - only needed for bash!

## https://brbsix.github.io/2015/11/23/perform-tab-completion-for-aliases-in-bash/
#_completion_loader docker
#complete -F _docker d
#
#_completion_loader git
#complete -F _git config # config aka dotfile management from $HOME/.dotfiles
#complete -F _git co
#
#_completion_loader systemctl
#complete -F _systemctl S
#
#_completion_loader systemctl
#complete -F _systemctl SS
#
#_completion_loader pacman
#complete -F _pacman p
#
#_completion_loader pacman
#complete -F _pacman sp

# --- #

md() { pandoc -t markdown "$1" | less ;}

shdl() { curl -O "$(curl -s http://sci-hub.tw/"$*" | grep location.href | grep -o 'http.*pdf')" ;}
se() { du -a ~/.local/bin/* ~/.config/* | awk '{print $2}' | fzf | xargs  -r "$EDITOR" ;}
svcp() { vcopy "$(du -a ~/.local/bin/* ~/.config/* | awk '{print $2}' | fzf)" ;}
vf() { fzf | xargs -r -I % "$EDITOR" % ;}

# kill workspace (i3)
kw() {
	[ -n "$1" ] && workspace="$1" || {
		printf "noob gimme workspace numbah\n"
		return 1
	}

	i3-msg "[workspace=$workspace] kill"
}

bright() {
	[ -z "$1" ] && { echo "usage: bright [brightness %]"; return 1; }
	brightness="$(echo "$1 / 100" | bc -l)"
	echo "brightness $brightness"
	xrandr --output DP-0 --brightness "$brightness"
}

KO() {
	while (killall redshift); do echo KO; done
}

song() {
	[ -n "$1" ] && out="$1" || out="$(xclip -selection c -o)"
	printf "$out\n"
	[ -n "$out" ] && printf "$out\n" >> ~/songs
}

mc() { mkdir -p "$@" && cd $_; }
mkdc() { mc $* }
mk() { mc $* }

eslf() { esl $* --fix }
esldf() { esl . --fix }
eslfd() { esl . --fix }
esll() { esl . --fix }

# https://stackoverflow.com/questions/1401002/how-to-trick-an-application-into-thinking-its-stdout-is-a-terminal-not-a-pipe#comment72300162_20401674
faketty() {
    script -qfc "$(printf "%q " "$@")" /dev/null
}
