##############################
#  _
# | |_ _ __ ___  _   ___  __
# | __| '_ ` _ \| | | \ \/ /
# | |_| | | | | | |_| |>  <
#  \__|_| |_| |_|\__,_/_/\_\
#
#############################
#
# COPY AND PASTE
# http://robots.thoughtbot.com/tmux-copy-paste-on-os-x-a-better-future
#
# Use vim keybindings in copy mode
setw -g mode-keys vi
set  -g status-keys vi
# set -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'
  set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'

# https://github.com/matze/vim-move/issues/15#issuecomment-168177827
set -s escape-time 0

bind-key C-c copy-mode

# Setup 'v' to begin selection as in Vim
#bind-key -t vi-copy v begin-selection
#bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
# unbind -t vi-copy Enter
# bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"
#
############################################################################
############################################################################
# Reset Prefix
############################################################################
set -g prefix C-a
# Start windows and panes at 1, not 0 (https://unix.stackexchange.com/a/35932/332452)
set -g base-index 1
setw -g pane-base-index 1
#
setw -g mode-keys vi
setw -g mode-style bg=black
set-option -g default-terminal "xterm-256color"
set-option -g pane-active-border-style fg=green
set-window-option -g xterm-keys on # for vim
set-window-option -g mode-keys vi # vi key
set-window-option -g monitor-activity on
set-window-option -g window-status-current-style fg=white
set-window-option -g window-status-current-style bg=white
setw -g window-status-current-style reverse
setw -g automatic-rename
set -g mouse on
set -g history-limit 30000
set -g terminal-overrides 'xterm*:smcup@:rmcup@'
set-option -g status-justify left
set-option -g status-bg black # colour213 # pink
set-option -g status-fg cyan
set-option -g status-interval 1
set-option -g status-left '#[fg=cyan,bold]» #[default]'
set-option -g status-right ' #[fg=cyan][#[fg=cyan,bold]#S#[fg=cyan,default]] #[fg=magenta,bold]%R #[fg=cyan,bold]#T «'
set-option -g visual-activity off
set-option -g set-titles on
set-option -g set-titles-string '#H:#S.#I.#P #W #T'
unbind -T root C-c
unbind j
unbind C-b # unbind default leader key
unbind '"' # unbind horizontal split
unbind %   # unbind vertical split
unbind C-j # vim
unbind C-k # vim
bind-key r source-file ~/.config/tmux/tmux.conf

bind-key c split-window -h # split pane horizontally
bind-key -n 'C-\' split-window -h # split pane horizontally
bind-key -n 'M-\' split-window -h # split pane horizontally

bind-key v split-window -v # split pane vertically
## bind-key -n 'C-/' split-window -v # split pane vertically ## broken :/
bind-key -n 'M-/' split-window -v # split pane vertically

bind-key Space list-panes
bind-key Enter break-pane
bind-key Space command-prompt "joinp -t:%%" # %% = prompt for window.pane [-V|H] # vert|hor split
bind-key -n C-up prev
bind-key -n C-left prev
bind-key -n C-right next
bind-key -n C-down next
# bind-key -n C-n new-window
bind-key -n C-s new-window
bind-key -n C-x kill-window

# C-j & C-k would interferes with vim, C-l is clear etc. etc.
#bind-key -n C-h previous-window 
#bind-key -n C-l next-window

###bind C-n new-window
###bind C-j previous-window
###bind C-k next-window
#bind-key C-a last-window # C-a C-a for last active window
bind A command-prompt "rename-window %%"
# By default, all windows in a session are constrained to the size of the
# smallest client connected to that session,
# even if both clients are looking at different windows.
# It seems that in this particular case, Screen has the better default
# where a window is only constrained in size if a smaller client
# is actively looking at it.
setw -g aggressive-resize on
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R
bind-key -r C-h resize-pane -L
bind-key -r C-j resize-pane -D
bind-key -r C-k resize-pane -U
bind-key -r C-l resize-pane -R
bind o select-layout "active-only"
bind M-- select-layout "even-vertical"
bind M-| select-layout "even-horizontal"
bind -n C-t rotate-window

bind-key -n M-q detach-client
## bind-key -n M-d kill-window ## broken :/
## bind-key M-d kill-window ## broken :/

# quick windows! will also create it if does not already exist !! https://unix.stackexchange.com/a/285648/332452
bind-key -n C-1 if-shell 'tmux select-window -t :1' '' 'new-window -t :1'
bind-key -n C-2 if-shell 'tmux select-window -t :2' '' 'new-window -t :2'
bind-key -n C-3 if-shell 'tmux select-window -t :3' '' 'new-window -t :3'
bind-key -n C-4 if-shell 'tmux select-window -t :4' '' 'new-window -t :4'
bind-key -n C-5 if-shell 'tmux select-window -t :5' '' 'new-window -t :5'
bind-key -n C-6 if-shell 'tmux select-window -t :6' '' 'new-window -t :6'
bind-key -n C-7 if-shell 'tmux select-window -t :7' '' 'new-window -t :7'
bind-key -n C-8 if-shell 'tmux select-window -t :8' '' 'new-window -t :8'
bind-key -n C-9 if-shell 'tmux select-window -t :9' '' 'new-window -t :9'
bind-key -n C-0 if-shell 'tmux select-window -t :10' '' 'new-window -t :10'

bind-key -n M-1 if-shell 'tmux select-window -t :1' '' 'new-window -t :1'
bind-key -n M-2 if-shell 'tmux select-window -t :2' '' 'new-window -t :2'
bind-key -n M-3 if-shell 'tmux select-window -t :3' '' 'new-window -t :3'
bind-key -n M-4 if-shell 'tmux select-window -t :4' '' 'new-window -t :4'
bind-key -n M-5 if-shell 'tmux select-window -t :5' '' 'new-window -t :5'
bind-key -n M-6 if-shell 'tmux select-window -t :6' '' 'new-window -t :6'
bind-key -n M-7 if-shell 'tmux select-window -t :7' '' 'new-window -t :7'
bind-key -n M-8 if-shell 'tmux select-window -t :8' '' 'new-window -t :8'
bind-key -n M-9 if-shell 'tmux select-window -t :9' '' 'new-window -t :9'
bind-key -n M-0 if-shell 'tmux select-window -t :10' '' 'new-window -t :10'

#bind-key -n C-1 select-window -t :=1
#bind-key -n C-2 select-window -t :=2
#bind-key -n C-3 select-window -t :=3
#bind-key -n C-4 select-window -t :=4
#bind-key -n C-5 select-window -t :=5
#bind-key -n C-6 select-window -t :=6
#bind-key -n C-7 select-window -t :=7
#bind-key -n C-8 select-window -t :=8
#bind-key -n C-9 select-window -t :=9
#bind-key -n C-0 select-window -t :=10

#bind-key -n M-1 select-window -t :=1
#bind-key -n M-2 select-window -t :=2
#bind-key -n M-3 select-window -t :=3
#bind-key -n M-4 select-window -t :=4
#bind-key -n M-5 select-window -t :=5
#bind-key -n M-6 select-window -t :=6
#bind-key -n M-7 select-window -t :=7
#bind-key -n M-8 select-window -t :=8
#bind-key -n M-9 select-window -t :=9
#bind-key -n M-0 select-window -t :=10

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
# bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
# bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l
