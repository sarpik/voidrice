# ~/.gitconfig
#	@author:	Kipras Melnikovas (kipras.org) <kipras@kipras.org>
#	@dotfiles:	https://github.com/kiprasmel/voidrice
#	@license:	GPL-3.0
#
#	@description:
#	This is Git's per-user configuration file.
#

[user]
	# username - custom, used for some aliases / scripts
	username = kiprasmel
	name = Kipras Melnikovas
	email = kipras@kipras.org
	signingkey = AA505BC1C6D8AD90
[core]
	# editor is $EDITOR. I don't have it here since it won't expand and will interfere with scripts.
	# editor = '/usr/bin/env code' --new-window --wait
	autocrlf = input # `auto` for Windows, `input` for *nix. Read more @ https://stackoverflow.com/q/5834014/9285308
	safecrlf = false # hides warning message but doesn't impact `autocrlf` functionality
	pager = diff-so-fancy | less --tabs=4 -RFX
	longpaths = true
[imap]
	host = mail.kipras.org
	user = kipras@kipras.org # todo - kipras@kipras.org
	port = 993
	sslverify = false
	folder = Drafts
[sendemail]
	smtpEncryption = tls
	smtpServer = mail.kipras.org
	smtpUser = kipras@kipras.org
	smtpServerPort = 587
[stash]
	## usebuiltin = no # see https://public-inbox.org/git/xmqqa79lbpte.fsf@gitster-ct.c.googlers.com/
[gpg]
	program = gpg2
[color]
	branch = auto
	diff = auto
	interactive = auto
	status = auto
	grep = auto
[commit]
	verbose = true
	gpgSign = true
[merge]
	ff = no
	tool = code
[rebase]
	missingCommitsCheck = warn
	#autostash = true # you cannot access it from the stash which sucks
[pull]
	rebase = true
	ff = yes
[push]
	followTags = true # see https://stackoverflow.com/a/26438076/9285308
[hub]
	protocol = ssh
[help]
	autoCorrect = 0
[diff]
	tool = default-difftool
	algorithm = histogram
[difftool "default-difftool"]
  cmd = code --wait --diff $LOCAL $REMOTE
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

[alias]
	#
	# Some insight about aliases
	#
	# $GIT_PREFIX refers to the **current** directory of the repo
	# .           refers to the **root**    directory of the repo
	#
	# ---
	#
	# There's also different behavior depending if you create the alias
	#
	# a) without the exclamation mark (thus using only one git command), like so:
	#    do_stuff =       commit -m "did some stuff"
	#
	# -> not sure if the $GIT_PREFIX even works in this case
	#
	# b) with    the exclamation mark (thus using any shell command(s)), like so:
	#    do_stuff = !git commit -m "did some stuff" && echo "you just commited!"
	#
	# -> $GIT_PREFIX does what you expect it to do
	#
	# 
	#
	fn = "!f() { echo \"hi\"; }; f;"

	a        = add

	ad       = !git add ${GIT_PREFIX:-.} # refers to the **current** directory of the repo ([d]ot)
	ag       = !git add               .  # refers to the **root**    directory of the repo ([g]lobal)

	adc      = !git add ${GIT_PREFIX:-.} && git c
	agc      = !git add               .  && git c

	adca     = !git add ${GIT_PREFIX:-.} && git ca
	agca     = !git add               .  && git ca

	adcaw    = !git add ${GIT_PREFIX:-.} && git ca --no-edit
	agcaw    = !git add               .  && git ca --no-edit

	adcawpf  = !git add ${GIT_PREFIX:-.} && git ca --no-edit && git push -f
	agcawpf  = !git add               .  && git ca --no-edit && git push -f

	adcawpfn = !git add ${GIT_PREFIX:-.} && git ca --no-edit && git push -f --no-verify # --no-verify to ignore husky's hooks
	agcawpfn = !git add               .  && git ca --no-edit && git push -f --no-verify # --no-verify to ignore husky's hooks

	adct     = !git add ${GIT_PREFIX:-.} && git c -m "TEMP" --no-verify # --no-verify to ignore husky's hooks 
	agct     = !git add               .  && git c -m "TEMP" --no-verify # --no-verify to ignore husky's hooks 

	ap  = add --patch
	adp = !git add --patch ${GIT_PREFIX:-.}
	agp = !git add --patch               .

	b = branch
	ba = branch --all
	bd = delete-branch # git-extras
	bp = backup
	backup = !git-backup # remote script, availabe @ github.com/kiprasmel/dotfiles/.local/bin/tools/git-backup
	behind = !git-behind # remote script, available @ github.com/kiprasmel/dotfiles/.local/bin/tools/git-behind
	behind-remote = !git-behind-remote
	c = commit -S -s
	ca = c --amend
	caw = c --amend --no-edit
	cawpf = !git c --amend --no-edit && git push -f
	cawpfn = !git c --amend --no-edit && git push -f --no-verify # --no-verify to ignore husky's hooks
	ct = c -m "TEMP"
	cgg = !git c -m "$(curl -Ls http://whatthecommit.com/index.txt)"
	cl = clone
	co = checkout
	cob = checkout -b
	#co = !git stash -u && git checkout
	cod = checkout dev
	com = checkout master
	cfg = config --global --edit
	cs = !clear && git status
	csl = !clear && git sl
	d = diff
	dd = diff .
	df = diff FETCH_HEAD
	ds = diff --staged
	e = exec
	exec = "!exec " # exec script at root of repo!
					# this is useful in case you're deep in the repo
					# but want to exec a command at the top, e.g.
	                # `git exec sudo make install`
                    #
					# the opposite is using $GIT_PREFIX,
	                # see some examples above.
					#
	                # see also https://github.com/kiprasmel/git-backup/commit/b127ba68dffe7d6c84dc0ffc54bc810b3b9683ed
					#
	f = fetch
	fa = fetch --all
	#g =
	#h =
	#i =
	#j =
	#k =
	l = lg
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	lgs = lg --stat
	lp = log --patch #--follow
	#m = merge
	mf = merge --ff # I have `merge` set to `ff: no` (see above), so by default it's `merge --no-ff`. This is the opposite.
	#n =
	o = browse # [o]pen -> hub browse -> opens repo in github
	p = push --follow-tags
	pp = "!git push --set-upstream \"${1:-origin}\" \"${2:-HEAD}\"" # hella neat! automatically sets upstream
	pt = push --follow-tags                                   # not `--tags` for a reason: https://stackoverflow.com/a/26438076/9285308
	# pa = push --all                                         # meh
	pl = pull
	pa = !git -c core.pager='' diff -u                      # "patch"
	ppr = pull-request # requires 'hub'
	dpr = pull-request -d
	prme =        pull-request --push -a kiprasmel  #--base        master  -epo                                                  # targets upstream TODO
	prmee =  !hub pull-request --push -a kiprasmel  --base kiprasmel:master  -epo --head kiprasmel:"$(git symbolic-ref --short HEAD)" # targets origin  (your repo)
	prmed =       pull-request --push -a kiprasmel  #--base        master -depo                                                  # targets upstream TODO
	prmeed = !hub pull-request --push -a kiprasmel  --base kiprasmel:master -depo --head kiprasmel:"$(git symbolic-ref --short HEAD)" # targets origin  (your repo)
	prmedw = !hub prmed --no-edit
	prmeedw = !hub prmeed --no-edit
	#prmeed = !git pull-request -a kiprasmel  --base "${$(git config --global --get user.username):-kiprasmel}":master -depo # targets local repo
	parent = !git show-branch | sed \"s/].*//\" | grep \"\\*\" | grep -v \"$(git rev-parse --abbrev-ref HEAD)\" | head -n1 | sed \"s/^.*\\[//\"
	#q =
	r = rebase
	rc = rebase --continue
	ri = rebase -i
	ra = rebase --abort
	rom = rebase origin/master
	riom = rebase -i origin/master
	rs = reset
	rmbp = rmbackup
	rmbackup = !git-rm-backup # remote script, availabe @ dotfiles/.scripts/tools/git-rm-backup
	s = status
	sa = status --untracked-files=all
	si = status --ignored=traditional
	sil = !git -c color.status=always status --ignored=traditional | less -R
	sl = !git -c color.status=always status | less -R # https://stackoverflow.com/a/18304605
			                                          # the -c option is explained by `man git` @ 47:
													  # Pass a configuration parameter to the command.
	                                                  # The value given will override values from configuration files.
	sb = show-branch
	so = show
	ss = show
	sh = show HEAD
	shc = !git show HEAD | wc
	stash-unapply = !git stash show -p | git apply -Rc
	t = tag
	tt = tas
	tas = tag -a -s
	#u =
	#v =
	#w =
	#x =
	#y =
	#z =
[cinnabar]
	helper = /tmp/tmpbf9i8_tc/git-cinnabar-master/git-cinnabar-helper
	version-check = 1613416822
