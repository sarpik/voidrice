# ~/.gitconfig
#	@author:	Kipras Melnikovas (kipras.org) <kipras@kipras.org>
#	@dotfiles:	https://github.com/sarpik/voidrice
#	@license:	GPL-3.0
#
#	@description:
#	This is Git's per-user configuration file.
#

[user]
	# @param username - custom, used for some aliases / scripts (& also my github/bitbucket username)
	username = sarpik
	name = Kipras Melnikovas
	email = kipras@kipras.org
	signingkey = AA505BC1C6D8AD90
[core]
	### editor is $EDITOR. I don't have it here since it won't expand and will interfere with scripts.
	# editor = '/usr/bin/env code' --new-window --wait
	autocrlf = input # `auto` for Windows, `input` for *nix. Read more @ https://stackoverflow.com/q/5834014/9285308
	safecrlf = false # Hides warning message but doesn't impact `autocrlf` functionality
	pager = less -R
	longpaths = true
[imap]
	host = mail.kipras.org
	user = kipras@kipras.org # todo - kipras@kipras.org
	port = 993
	sslverify = false
	folder = Drafts
[sendemail]
	smtpEncryption = tls
	smtpServer = mail.kipras.org
	smtpUser = kipras@kipras.org
	smtpServerPort = 587
[stash]
	usebuiltin = no # see https://public-inbox.org/git/xmqqa79lbpte.fsf@gitster-ct.c.googlers.com/
[gpg]
	program = gpg2
[color]
	branch = auto
	diff = auto
	interactive = auto
	status = auto
	grep = auto
[commit]
	verbose = true
	gpgSign = true
[merge]
	ff = no
	tool = code
[rebase]
	missingCommitsCheck = warn
	autostash = true
[pull]
	rebase = true
	ff = yes
[push]
	followTags = true # see https://stackoverflow.com/a/26438076/9285308
[hub]
	protocol = ssh
[help]
	autoCorrect = 0
[diff]
	tool = default-difftool
[difftool "default-difftool"]
  cmd = code --wait --diff $LOCAL $REMOTE
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[winUpdater]
	recentlySeenVersion = 2.21.0.windows.1

[alias]
	fn = "!f() { echo \"hi\"; }; f;"
	a = add
	aca = !git add . && git ca
	ad = add
	adc = !git add . && git c
	ap = add --patch
	b = branch
	ba = branch --all
	bp = backup
	backup = !git-backup # remote script, availabe @ github.com/sarpik/dotfiles/.local/bin/tools/git-backup
	# how many commits you're behind some other branch
	behind = !git-behind # remote script, available @ github.com/sarpik/dotfiles/.local/bin/tools/git-behind
	behind-remote = !git-behind-remote
	c = commit -S -s
	ca = c --amend
	cl = clone
	co = checkout
	#co = !git stash -u && git checkout
	cod = checkout dev
	com = checkout master
	#checkout = !git stash -u && command git "$@"
	cfg = config --global --edit
	cs = !clear && git status
	csl = !clear && git sl
	d = diff
	ds = diff --staged
	df = diff FETCH_HEAD
	e = exec
	exec = "!exec " # execute a script at the root of the repository!
	# this is super useful, for example,
	# `git exec sudo make install`!
	# See https://github.com/sarpik/git-backup/commit/b127ba68dffe7d6c84dc0ffc54bc810b3b9683ed
	#
	f = fetch
	fa = fetch --all
	#g =
	#h =
	#i =
	#j =
	#k =
	#l =
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit # awesome log!
	lp = log --patch #--follow
	#m = merge
	mf = merge --ff # I have `merge` set to `ff: no` (see above), so by default it's `merge --no-ff`. This is the opposite.
	#n =
	#o =
	p = push
	# pa = push --all # meh
	pl = pull
	# git push -u origin master -> g pp
	pp = "!f() { \
		remote=\"${1:-origin}\"; \
		currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
		git push --set-upstream \"$remote\" \"$currentBranch\"; }; \
	f; "
	pt = push --follow-tags # not `--tags` for a reason: https://stackoverflow.com/a/26438076/9285308
	ppr = pull-request # requires 'hub'
	dpr = pull-request -d
	prme =        pull-request --push -a sarpik  --base        master  -epo                                                  # targets upstream
	prmee =  !hub pull-request --push -a sarpik  --base sarpik:master  -epo --head sarpik:"$(git symbolic-ref --short HEAD)" # targets origin  (your repo)
	prmed =       pull-request --push -a sarpik  --base        master -depo                                                  # targets upstream
	prmeed = !hub pull-request --push -a sarpik  --base sarpik:master -depo --head sarpik:"$(git symbolic-ref --short HEAD)" # targets origin  (your repo)
	#prmeed = !git pull-request -a sarpik  --base "${$(git config --global --get user.username):-sarpik}":master -depo # targets local repo
	parent = !git show-branch | sed \"s/].*//\" | grep \"\\*\" | grep -v \"$(git rev-parse --abbrev-ref HEAD)\" | head -n1 | sed \"s/^.*\\[//\"
	#q =
	#r =
	rmbp = rmbackup
	rmbackup = !git-rm-backup # remote script, availabe @ dotfiles/.scripts/tools/git-rm-backup
	s = status
	sa = status --untracked-files=all
	sb = show-branch
	sh = show HEAD
	shc = !git show HEAD | wc
	si = status --ignored=traditional
	sl = !git -c color.status=always status | less -R # https://stackoverflow.com/a/18304605
			# /\ the -c option is explained by `man git` @ 47
			# > Pass a configuration parameter to the command. The value given will override values from configuration files.
	so = show
	ss = show
	sil = !git -c color.status=always status --ignored=traditional | less -R
	stash-unapply = !git stash show -p | git apply -Rc
	#t =
	#u =
	#v =
	#w =
	#x =
	#y =
	#z =
